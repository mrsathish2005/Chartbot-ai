# 1. Import Libraries
import pandas as pd
import numpy as np
import re
import string
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))

# 2. Load Dataset
df = pd.read_csv('chatbot_intent_dataset.csv')  # Use your actual file here
print(df.head())

# 3. Preprocess Text
def clean_text(text):
    text = text.lower()
    text = re.sub(r'.*?', '', text)
    text = re.sub(r'[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub(r'\w*\d\w*', '', text)
    tokens = text.split()
    tokens = [word for word in tokens if word not in stop_words]
    return ' '.join(tokens)

df['clean_text'] = df['text'].apply(clean_text)

# 4. Encode Labels
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['label'] = le.fit_transform(df['intent'])

# 5. Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(
    df['clean_text'], df['label'], test_size=0.2, random_state=42)

# 6. Vectorize Text
tfidf = TfidfVectorizer()
X_train_vec = tfidf.fit_transform(X_train)
X_test_vec = tfidf.transform(X_test)

# 7. Train Model
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# 8. Evaluate Model
y_pred = model.predict(X_test_vec)
print(classification_report(y_test, y_pred, target_names=le.classes_))

# 9. Confusion Matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(12, 6))
sns.heatmap(cm, annot=True, xticklabels=le.classes_, yticklabels=le.classes_, cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("True")
plt.show()

# 10. Chatbot Function
def chatbot_response(user_input):
    cleaned_input = clean_text(user_input)
    vec_input = tfidf.transform([cleaned_input])
    pred = model.predict(vec_input)[0]
    intent = le.inverse_transform([pred])[0]
    return f"Predicted Intent: {intent}"

# 11. Test the Chatbot
while True:
    user_input = input("You: ")
    if user_input.lower() in ['exit', 'quit']:
        print("Chatbot: Goodbye!")
        break
    print("Chatbot:", chatbot_response(user_input))￼Ente
